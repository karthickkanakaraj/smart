[SMART-CreateAlertLookups(1)]
args = PropertyName
definition = `SMART-GetItrakUser()`\
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd")\
       \
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
| eval LookupKey = _key\
`SMART-CreateITRAKPayload(ScenarioTypeCode,Reason)`        \
                                           \
| table expiry LookupKey PropertyID Timestamp ScenarioTypeCode CustomerID EmployeeID\
        LocationCode PitNo Active AreaAuditedCode Comments ExpiryDate GameCode \
        GameTypeList MonitoringType PitListCode Priority Reason Description \
        Status LastUpdated LastUpdatedBy iTrakReference _indexPrefix payload IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-CreateIGTAlertLookups(1)]
args = PropertyName
definition = `SMART-GetItrakUser()`\
| eval IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       Timestamp      = AlertTime,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd")\
       \
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
| eval LookupKey = _key\
`SMART-CreateITRAKPayload(ScenarioTypeCode,Reason)`        \
\
| eval CustomerID=replace(CustomerID,Delim,"") \
| eval EmployeeID=replace(EmployeeID,Delim,"")                                            \
\
| table expiry LookupKey PropertyID Timestamp ScenarioTypeCode CustomerID EmployeeID\
        LocationCode PitNo Active AreaAuditedCode Comments ExpiryDate GameCode \
        GameTypeList MonitoringType PitListCode Priority Reason Description \
        Status LastUpdated LastUpdatedBy iTrakReference _indexPrefix payload IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-CreateITRAKPayload(2)]
args = ScenarioTypeCode,Reason
definition = | fillnull value="" custFirstName custLastName emplFirstName emplLastName LocationCode\
                    ActualWin WinLoss MonitoringType LastUpdatedBy Priority\
\
| eval CustomerName = "Patron: " + custFirstName + " " + custLastName + " #" + CustomerID,\
       EmployeeName = "Staff Member: " + emplFirstName + " " + emplLastName + " #" + EmployeeID,\
       Location     = LocationCode,\
       Section      = "Pit " + substr(LocationCode,3,2) + " - " + LocationCode\
       \
``` added a switchable name for Employee and Customer as some reasons are used across different scenarios which requires this i.e. Significant action ```\
| eval SignificantActionName=if((ScenarioTypeCode == "CustomerCardSwipe"),CustomerName,EmployeeName) \
| eval EfileName=if((ScenarioTypeCode == "CustomerAndEmployeeCardSwipe"),CustomerName + "\n" + EmployeeName,EmployeeName) \
\
``` strip off all characters starting at @ ```\
| eval fields=split(LastUpdatedBy,"@")\
| eval LastUpdatedBy = mvindex(fields,0)\
\
| eval Time = case(\
$Reason$="DACOM Jackpot",AlertTime,\
$Reason$="New Card",AlertTime,\
$Reason$="New Equipment",AlertTime,\
1==1, "")       \
\
| eval Amount = case(\
$Reason$="DACOM Jackpot", JackpotValue,\
$Reason$="Patron Win",ActualWin,\
$Reason$="Table Loss",WinLoss,\
1==1, 0)\
       \
`SMART-CreateITRAKRemark(Reason="$Reason$",CustomerName="$CustomerName$",EmployeeName="$EmployeeName$",Location="$LocationCode$",Amount="$Amount$",Time="$Time$")`\
                    \
``` Creating field values where calculations are required for fields which are used to populate the json payload ```\
| eval GameType=substr(LocationCode,1,2)\
| eval Property=case((PropertyID == 1),"Crown Melbourne",(PropertyID == 2),"Crown Perth",(PropertyID == 3),"Crown Sydney")\
| eval MessageType=case(ScenarioTypeCode="EmployeeCardSwipe", "Employee Card Swipe", ScenarioTypeCode="CustomerCardSwipe", "Customer Card Swipe", ScenarioTypeCode="TableWinLoss", "Table Win/Loss", ScenarioTypeCode="CustomerWinLoss", "Table Win/Loss", ScenarioTypeCode="CustomerAndEmployeeCardSwipe", "Customer And Employee Card Swipe", ScenarioTypeCode="NewCard", "New Cards", ScenarioTypeCode="SignificantAction", "Significant Action", ScenarioTypeCode="DACOMJackpot", "DACOM Jackpot", ScenarioTypeCode="NewEquipment", "New Equipment")\
| eval CurrentTime=strftime(now(),"%Y-%m-%d %H:%M:%S.000")\
| eval SavingsLossValue=case(ScenarioTypeCode="CustomerWinLoss", ActualWin, ScenarioTypeCode="TableWinLoss", WinLoss)\
| eval Violation=case(ScenarioTypeCode="CustomerWinLoss", "Win", ScenarioTypeCode="TableWinLoss", "Loss")\
| eval SavingsLossType=case(ScenarioTypeCode="CustomerWinLoss", "Customer Win", ScenarioTypeCode="TableWinLoss", "Table Loss")\
\
``` Alerts with Status=Posting are Auto Post so the Staus sent to iTrak must be closed ```\
`SMART-GetItrakStatus(ScenarioTypeCode,Priority)`\
\
| eval prop          = lower(substr(Property,7,3)),\
       CreatedBy     = "sa_" + prop + "_itrksmrt",\
       RequestedByID = ""\
\
``` creating json objects for all the fields used in the json payload ```\
| eval\
    ``` we need the leading zeros on customer and employee ids. Add a unique delim \
        here and strip it off the payload later ```\
    Delim         = md5("x"),\
    CustomerID    = Delim + CustomerID    + Delim,\
    EmployeeID    = Delim + EmployeeID    + Delim,\
    CreatedBy     = Delim + CreatedBy     + Delim,\
    RequestedByID = Delim + RequestedByID + Delim,\
\
    BaseFields=json_object("CorrelationID",LookupKey, "MessageType",MessageType, "Property",Property, "AreaAudited",AreaAuditedCode, "Section",Section, "AuditRemarks",Remarks, \
                           "AuditStart",AlertTime, "AuditEnd",AlertTime, "ReviewMethod",MonitoringType, "CreatedBy",CreatedBy, "CreatedDate",CurrentTime, \
                           "RequestedByID",RequestedByID, "RequestedByType","Personnel", "Status",iTrakStatus, "GameType",GameType),\
    AddPatron=json_set(BaseFields, "patronID",CustomerID),\
    AddParticipant=json_set(BaseFields, "Participants",json_array(json_object("ParticipantType","Personnel", "ParticipantID",EmployeeID))),\
    AddBlankParticipant=json_set(BaseFields,"Participants",json_array()), \
    AddPatronAndParticipant=json_set(AddPatron, "Participants",json_array(json_object("ParticipantType", "Personnel", "ParticipantID", EmployeeID))),\
    AddCustomerWinLoss=json_set(AddPatron, "Violation", Violation, "SavingsLossType", SavingsLossType, "SaveOrLoss", "Loss", "SavingsLossValue", SavingsLossValue),\
    AddTableWinLoss=json_set(AddParticipant, "Violation",Violation, "SavingsLossType",SavingsLossType, "SaveOrLoss","Loss", "SavingsLossValue",SavingsLossValue)\
\
``` creates payload using the fields required by each scenario ```\
| eval payload=case(\
     in(ScenarioTypeCode, "DACOMJackpot"), AddBlankParticipant,\
     in(ScenarioTypeCode, "CustomerCardSwipe"), AddPatron,\
     in(ScenarioTypeCode, "CustomerAndEmployeeCardSwipe"), AddPatronAndParticipant,\
     in(ScenarioTypeCode, "EmployeeCardSwipe", "NewEquipment", "NewCard", "SignificantAction"), AddParticipant,\
     in(ScenarioTypeCode, "TableWinLoss"), AddTableWinLoss,\
```  in(ScenarioTypeCode, "CustomerWinLoss"), AddCustomerWinLoss, ```\
     in(ScenarioTypeCode, "CustomerWinLoss"), AddTableWinLoss,      \
	 true(),"Unknown ScenarioTypeCode")\
\
``` Converting all numbers to strings as this is what is required by Crown gateway ```\
| eval payload=replace(payload,"\"CreatedBy\":(\d{6})", "\"CreatedBy\":\"\1\"")\
| eval payload=replace(payload,"\"RequestedByID\":(\d{6})", "\"RequestedByID\":\"\1\"")\
| eval payload=replace(payload,"\"ParticipantID\":(\d{1,6})", "\"ParticipantID\":\"\1\"")\
| eval payload=replace(payload,"\"patronID\":(\d{1,8})", "\"patronID\":\"\1\"")\
| eval payload=replace(payload,"\"SavingsLossValue\":(-\\d+)","\"SavingsLossValue\":\"\\1\"") \
\
``` strip delim added above ```\
| eval payload=replace(payload,Delim,"")\
\
``` Converting new line characters to single backslash as iTrak doesnt handle true escaped characters ```\
| eval payload=replace(payload,"(\\\\\\\\n)", "\\n")
iseval = 0

[SMART-CreateITRAKRemark(6)]
args = Reason,CustomerName,EmployeeName,Location,Amount,Time
definition = | eval Remarks = Comments + "\nPriority: " + Priority \
| eval Remarks = case(\
$Reason$="Advantage Play","SMART Alert - Advantage Play\nIntegrity Monitoring conducted for possible advantage play.\nTime monitored (start/finish):\nTable(s): \n" + CustomerName + "\nDealer:\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager Advised:\n\nAction Taken by Surv Manager: (if applicable)",\
$Reason$="Suspected Noted Player","SMART Alert - Suspected Noted Player\nTime monitored (start/finish):\nTable(s):\n" + CustomerName + "\nDealer:\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager Advised:\n\nAction Taken by Surv Manager: (if applicable)\n",\
$Reason$="Confirmed Noted Player","SMART Alert - Confirmed Noted Player\nTime monitored (start/finish):\nTable(s):\n" + CustomerName + "\nDealer:\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager Advised:\n\nAction Taken by Surv Manager: (if applicable)\n",\
$Reason$="Restricted Noted Player","SMART Alert - Restricted Noted Player\nTime monitored (start/finish):\nTable(s):\n" + CustomerName + "\nDealer:\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager Advised:\n\nAction Taken by Surv Manager: (if applicable)\n",\
$Reason$="Footage Required","SMART Alert - Footage Required\nFootage obtained:\n\n" + CustomerName + "\nFootage Name / Location:\nStart Time:\nEnd Time:\nSEER Patron Profile Updated? Y/N\nArea of focus: " + Remarks + "\n",\
$Reason$="Collusion Risk","SMART Alert - Collusion Risk\nE-File monitoring/reviewing\n" + EmployeeName + "\n" + CustomerName + "\nTime monitored (start/finish):\nTable(s): " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction taken:\nSurv Manager advised of observations: (specify name)\n",\
$Reason$="Integrity Monitoring","SMART Alert - Integrity Monitoring\n" + EmployeeName + "\nTime monitored (start/finish):\nTable(s): " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction taken:\nSurv Manager advised of observations: (specify name)\n",\
$Reason$="Efile","SMART Alert - EFile\nE-File monitoring/reviewing\n" + EfileName + "\nTime monitored (start/finish):\nTable(s): " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction taken:\nSurv Manager advised of observations: (specify name)\n",\
$Reason$="Law Enforcement","SMART Alert - Law Enforcement\n" + CustomerName + "\nTime monitored (start/finish):\nLocation: " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction Taken:\n\nSurv Manager Advised:\n",\
$Reason$="DACOM Jackpot","SMART Alert - DACOM Jackpot\nTime: " + Time + "\nLocation: " + Location + "\nAmount: $" + Amount + "\nArea of focus: " + Remarks + "\n",\
$Reason$="New Card","SMART Alert - New Cards on Table\nTime: " + Time + "\nLocation: " + Location + "\nArea of focus: " + Remarks + "\n",\
$Reason$="Significant Action","SMART Alert - Significant Action\n" + SignificantActionName + "\nTime monitored (start/finish):\nLocation: " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction Taken:\n\nSurv Manager Advised:\n",\
$Reason$="Photo Request","SMART Alert - Photo Request\n" + CustomerName + "\nArea of focus:  " + Remarks + "\n",\
$Reason$="Player Profile Required","SMART Alert - Player Profile\n" + CustomerName + "\nAv. Bet: $\nWin/Loss: $\n\nGame Conditions:\nBetting Pattern:\nHandling Of Equipment:\nBody Language / Behaviour:\nBankroll Management:\nAssociates:\nStaff:\nOther Notes:\nArea of focus: " + Remarks + "\n",\
$Reason$="Scam Risk","SMART Alert - Scam Risk\n" + CustomerName + "\nTime monitored (start/finish):\nLocation: " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction Taken:\n\nSurv Manager Advised:\n",\
$Reason$="Suspicious Activity","SMART Alert - Suspicous Activity\n" + CustomerName + "\nTime monitored (start/finish):\nLocation: " + Location + "\nArea of focus: " + Remarks + "\nObservations:\n\nAction Taken:\n\nSurv Manager Advised:\n",\
$Reason$="Patron Win","SMART Alert - Patron Win\nTable: " + Location + "\n" + CustomerName + "\n\nRating details -\nTime:\nAverage bet:\nWin/Loss: " + Amount + "\n\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager advised of observations: (specify name)\n",\
$Reason$="Table Loss","SMART Alert - Table Loss\nTable: " + Location + "\nWin/Loss: " + Amount + "\nHourly Time: [Time of hourly figure]\nTime reviewed:\nArea of focus: " + Remarks + "\nObservations:\n\nSurv Manager advised of observations: (specify name)\n",\
$Reason$="New Equipment","SMART Alert - New Equipment\nTable: " + Location + "\nTime: " + AlertTime + "\nTime reviewed:\nArea of focus: " + Remarks + "\nObservations:\n",\
1==1, "Reason: " + $Reason$ + "\n" + EmployeeName + "\n" + CustomerName + "\nArea of focus: " + Remarks + "\n")
iseval = 0

[SMART-CustomerEmployeeSwipe-Alert(2)]
args = PropertyName,PropertyID
definition = inputlookup SMART-$PropertyName$-ScenarioInstances\
  where (ScenarioTypeCode = "CustomerAndEmployeeCardSwipe" AND PropertyID = "$PropertyID$") \
  \
| eval expiry = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > now()\
\
| join type=left max=0 ```CustomerID EmployeeID ```\
   [ | tstats latest(_time) as _time,\
       latest(Employee_Swipes.PropertyID)        as PropertyID,\
       latest(Employee_Swipes.SwipeAction)       as SwipeAction,\
       latest(Employee_Swipes.SignInEmployeeID)  as SignInEmployeeID,\
       latest(Employee_Swipes.SignInSuperID)     as SignInSuperID,\
       latest(Employee_Swipes.SignOutEmployeeID) as SignOutEmployeeID,\
       latest(Employee_Swipes.SignOutSuperID)    as SignOutSuperID,\
       latest(Employee_Swipes.GameCode)          as GameCode,\
       latest(Employee_Swipes.GameLocationCode)  as GameLocationCode,\
       latest(Employee_Swipes.PitNo)             as PitNo\
\
       from datamodel="Employee_Swipes" \
          where nodename="Employee_Swipes" AND \
              Employee_Swipes.PropertyID = $PropertyID$ AND\
             (Employee_Swipes.SignInEmployeeID != "" OR \
              Employee_Swipes.SignOutEmployeeID != "" OR\
              Employee_Swipes.SignInSuperID != "" OR \
              Employee_Swipes.SignOutSuperID != "") AND \
                earliest=-2h latest=now()\
             by Employee_Swipes.PropertyID,\
                Employee_Swipes.Timestamp,\
                Employee_Swipes.SignInEmployeeRole, \
                Employee_Swipes.SignOutEmployeeRole, \
                Employee_Swipes.SignInEmployeeID, \
                Employee_Swipes.SignOutEmployeeID\
             \
| rename Employee_Swipes.* as *\
| eval EmployeeTimestamp = strftime(_time,"%Y-%m-%dT%H:%M:%S")\
\
``` split DEALER_CHANGE, SUPERVISOR_CHANGE and DEALER_CREW_CHANGE events into separate \
    Sign Out and Sign In events. Split "Open Table" and "Close Table" events into \
    2 separate Sign In or 2 separate Sign Out events ```\
\
| eval openSwipe  = if(SignInSuperID  != "",1,0),\
       closeSwipe = if(SignOutSuperID != "",1,0)\
\
| eval splitField = split("split1,split2",",")\
| mvexpand splitField\
\
| eval emp1      = if(splitField="split1",case(openSwipe==1,SignInSuperID,closeSwipe==1,SignOutSuperID,1==1,SignInEmployeeID),""),\
       emp2      = if(splitField="split2",case(openSwipe==1,SignInEmployeeID,closeSwipe==1,SignOutEmployeeID,1==1,SignOutEmployeeID),""),\
       dir1      = if(splitField="split1",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"In"),""),\
       dir2      = if(splitField="split2",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"Out"),""),\
       \
       EmployeeID = if(splitField="split1",emp1,emp2),\
       swipeType  = if(splitField="split1",dir1,dir2)\
\
``` check if the latest swipe was a swipe In event ```\
| search EmployeeID != "" \
| dedup EmployeeID sortby - _time + swipeType\
| search swipeType = "In"\
\
| join max=0 PitNo, GameLocationCode [ tstats latest(_time) as _time,\
       latest(Customer_Swipes.PropertyID)         as PropertyID,\
       latest(Customer_Swipes.SignInCustomerID)   as SignInCustomerID,\
       latest(Customer_Swipes.SignOutCustomerID)  as SignOutCustomerID,\
       latest(Customer_Swipes.GameCode)           as GameCode,\
       latest(Customer_Swipes.GameLocationCode)   as GameLocationCode,\
       latest(Customer_Swipes.PitNo)              as PitNo,\
       latest(Customer_Swipes.SwipeAction)        as SwipeAction\
       \
       from datamodel="Customer_Swipes" \
          where nodename="Customer_Swipes" AND\
                Customer_Swipes.PropertyID = $PropertyID$ AND\
             earliest=-2h latest=now()\
             by Customer_Swipes.PropertyID, \
                Customer_Swipes.Timestamp, \
                Customer_Swipes.SignInCustomerID\
         | rename Customer_Swipes.* as *\
         | eval CustomerTimestamp = strftime(_time,"%Y-%m-%dT%H:%M:%S")]\
\
| eval openSwipe  = if(SignInCustomerID  != "",1,0),\
       closeSwipe = if(SignOutCustomerID != "",1,0),\
       reassign   = if(openSwipe = 1 AND closeSwipe = 1,1,0),\
       splitField = if(reassign = 1,split("split1,split2",","),"split1")\
\
| mvexpand splitField\
| eval cust1      = if(splitField="split1",case(reassign==1,SignInCustomerID,openSwipe==1,SignInCustomerID,closeSwipe==1,SignOutCustomerID),""),\
       cust2      = if(splitField="split2",case(reassign==1,SignOutCustomerID,1==1,""),""),\
       dir1       = if(splitField="split1",case(reassign==1,"In",openSwipe==1,"In",closeSwipe==1,"Out"),""),\
       dir2       = if(splitField="split2",case(reassign==1,"Out",1==1,""),""),\
       CustomerID = if(splitField="split1",cust1,cust2),\
       Action     = if(splitField="split1",dir1,dir2)\
\
``` check if the latest swipe was a swipe In event ```\
| search CustomerID != "" \
| dedup EmployeeID CustomerID sortby - CustomerTimestamp + Action \
| search Action = "In"\
     \
     | rename _time as EventTime\
     | eval LocationCode = GameLocationCode \
     | fields PropertyID CustomerID CustomerTimestamp EmployeeID EmployeeTimestamp \
              PitNo GameCode LocationCode GameLocationCode EventTime]\
\
| where isnotnull(EventTime)\
\
| eval _key = md5(\
   PropertyID + CustomerTimestamp + EmployeeTimestamp + \
   CustomerID + EmployeeID + ScenarioCode + \
   PitNo + PitListCode + GameCode + GameTypeList + \
   Reason + AreaAuditedCode + Comments + MonitoringType)  \
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F"\
\
``` Check if the Customer/Employee combination has occured in the last \
    2 mins and has not already been alerted in the last 10 mins ```        \
| lookup SMART-$PropertyName$-Alerts ScenarioTypeCode CustomerID EmployeeID OUTPUT AlertTime as AlertTimes\
| eventstats max(AlertTimes) as latestAlertTime by CustomerID, EmployeeID\
| eval latestSwipeTime = if((CustomerTimestamp > EmployeeTimestamp),\
                             CustomerTimestamp, EmployeeTimestamp),\
       latestSwipeTime = strptime(latestSwipeTime,"%Y-%m-%dT%H:%M:%S"),\
       latestAlertTime = strptime(latestAlertTime,"%Y-%m-%d %H:%M:%S")\
\
| eval nonfor10min      = if(isnull(latestAlertTime) OR ((latestAlertTime + (10 * 60)) <= now()),"T","F")\
| eval swipeInLast4mins = if((latestSwipeTime > (now() - (4 * 60)))  ,"T","F")\
\
| where nonfor10min = "T" AND swipeInLast4mins = "T"\
\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0)\
    \
| where pitMatch = 1 AND gameMatch = 1 \
\
``` Custom lookup fields ```\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron \
     OUTPUT FirstName as custFirstName LastName as custLastName\
| fillnull value="" custFirstName custLastName\
\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`    \
| eval emplFirstName = FirstName,\
       emplLastName  = LastName\
| fillnull value="" emplFirstName emplLastName\
\
| eval Description    =  custFirstName + " " + upper(custLastName) + " #" + CustomerID + ", " +\
                         emplFirstName + " " + upper(emplLastName) + " #" + EmployeeID,\
       Status         = "New",\
       postTries      = 0,\
       EventTime = strftime(strptime(CustomerTimestamp, "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%d %H:%M:%S")\
\
`SMART-CreateAlertLookups(PropertyName="$PropertyName$")`
iseval = 0

[SMART-CustomerEmployeeSwipe-Alert-IGTTM(2)]
args = PropertyName,PropertyID
definition = inputlookup SMART-$PropertyName$-ScenarioInstances\
  where (ScenarioTypeCode = "CustomerAndEmployeeCardSwipe" AND PropertyID = "$PropertyID$") \
| addinfo  \
| eval expiry = if(ExpiryDate="",info_max_time+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > info_max_time\
\
| join type=left max=0 ```CustomerID EmployeeID ```\
   [ | tstats latest(_time) as _time,\
       latest(Employee_Swipes.PropertyID)        as PropertyID,\
       latest(Employee_Swipes.SwipeAction)       as SwipeAction,\
       latest(Employee_Swipes.SignInEmployeeID)  as SignInEmployeeID,\
       latest(Employee_Swipes.SignInSuperID)     as SignInSuperID,\
       latest(Employee_Swipes.SignOutEmployeeID) as SignOutEmployeeID,\
       latest(Employee_Swipes.SignOutSuperID)    as SignOutSuperID,\
       latest(Employee_Swipes.GameCode)          as GameCode,\
       latest(Employee_Swipes.GameLocationCode)  as GameLocationCode,\
       latest(Employee_Swipes.PitNo)             as PitNo\
       latest(Employee_Swipes.VendorProduct)     as VendorProduct\
\
       from datamodel="Employee_Swipes" \
          where nodename="Employee_Swipes" AND \
              Employee_Swipes.PropertyID    = $PropertyID$ AND\
              Employee_Swipes.VendorProduct = "IGT Table Manager" AND\
             (Employee_Swipes.SignInEmployeeID != "" OR \
              Employee_Swipes.SignOutEmployeeID != "" OR\
              Employee_Swipes.SignInSuperID != "" OR \
              Employee_Swipes.SignOutSuperID != "") AND \
	      `offset_search_period("-2h", "N/A")`\
             by Employee_Swipes.PropertyID,\
                Employee_Swipes.Timestamp,\
                Employee_Swipes.SignInEmployeeRole, \
                Employee_Swipes.SignOutEmployeeRole, \
                Employee_Swipes.SignInEmployeeID, \
                Employee_Swipes.SignOutEmployeeID\
             \
| rename Employee_Swipes.* as *\
| eval EmployeeTimestamp = strftime(_time,"%Y-%m-%dT%H:%M:%S")\
\
``` split DEALER_CHANGE, SUPERVISOR_CHANGE and DEALER_CREW_CHANGE events into separate \
    Sign Out and Sign In events. Split "Open Table" and "Close Table" events into \
    2 separate Sign In or 2 separate Sign Out events ```\
\
| eval openSwipe  = if(SignInSuperID  != "",1,0),\
       closeSwipe = if(SignOutSuperID != "",1,0)\
\
| eval splitField = split("split1,split2",",")\
| mvexpand splitField\
\
| eval emp1      = if(splitField="split1",case(openSwipe==1,SignInSuperID,closeSwipe==1,SignOutSuperID,1==1,SignInEmployeeID),""),\
       emp2      = if(splitField="split2",case(openSwipe==1,SignInEmployeeID,closeSwipe==1,SignOutEmployeeID,1==1,SignOutEmployeeID),""),\
       dir1      = if(splitField="split1",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"In"),""),\
       dir2      = if(splitField="split2",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"Out"),""),\
       \
       EmployeeID = if(splitField="split1",emp1,emp2),\
       swipeType  = if(splitField="split1",dir1,dir2)\
\
``` check if the latest swipe was a swipe In event ```\
| search EmployeeID != "" AND EmployeeID != "null" \
| dedup EmployeeID sortby - _time + swipeType\
| search swipeType = "In"\
\
| join max=0 PitNo, GameLocationCode [ tstats latest(_time) as _time,\
       latest(Customer_Swipes.PropertyID)         as PropertyID,\
       latest(Customer_Swipes.SignInCustomerID)   as SignInCustomerID,\
       latest(Customer_Swipes.SignOutCustomerID)  as SignOutCustomerID,\
       latest(Customer_Swipes.GameCode)           as GameCode,\
       latest(Customer_Swipes.GameLocationCode)   as GameLocationCode,\
       latest(Customer_Swipes.PitNo)              as PitNo,\
       latest(Customer_Swipes.SwipeAction)        as SwipeAction\
       latest(Customer_Swipes.VendorProduct)      as VendorProduct\
       \
       from datamodel="Customer_Swipes" \
          where nodename="Customer_Swipes" AND\
                Customer_Swipes.PropertyID    = $PropertyID$ AND\
                Customer_Swipes.VendorProduct = "IGT Table Manager" AND\
	        `offset_search_period("-2h", "N/A")`\
             by Customer_Swipes.PropertyID, \
                Customer_Swipes.Timestamp, \
                Customer_Swipes.SignInCustomerID\
         | rename Customer_Swipes.* as *\
         | eval CustomerTimestamp = strftime(_time,"%Y-%m-%dT%H:%M:%S")]\
    \
| eval openSwipe  = if(SignInCustomerID  != "",1,0),\
       closeSwipe = if(SignOutCustomerID != "",1,0),\
       reassign   = if(openSwipe = 1 AND closeSwipe = 1,1,0),\
       splitField = if(reassign = 1,split("split1,split2",","),"split1")\
\
| mvexpand splitField\
| eval cust1      = if(splitField="split1",case(reassign==1,SignInCustomerID,openSwipe==1,SignInCustomerID,closeSwipe==1,SignOutCustomerID),""),\
       cust2      = if(splitField="split2",case(reassign==1,SignOutCustomerID,1==1,""),""),\
       dir1       = if(splitField="split1",case(reassign==1,"In",openSwipe==1,"In",closeSwipe==1,"Out"),""),\
       dir2       = if(splitField="split2",case(reassign==1,"Out",1==1,""),""),\
       CustomerID = if(splitField="split1",cust1,cust2),\
       Action     = if(splitField="split1",dir1,dir2)\
\
``` check if the latest swipe was a swipe In event ```\
| search CustomerID != "" AND CustomerID != "null" \
| dedup EmployeeID CustomerID sortby - CustomerTimestamp + Action \
| search Action = "In"\
     \
     | rename _time as EventTime\
     | eval LocationCode = GameLocationCode \
     | fields PropertyID CustomerID CustomerTimestamp EmployeeID EmployeeTimestamp \
              PitNo GameCode LocationCode GameLocationCode EventTime]\
\
| where isnotnull(EventTime)\
\
| eval _key = md5(\
   PropertyID + CustomerTimestamp + EmployeeTimestamp + \
   CustomerID + EmployeeID + ScenarioTypeCode + \
   PitNo + PitListCode + GameCode + GameTypeList + \
   Reason + AreaAuditedCode + Comments + MonitoringType)  \
| eval SavedKey = _key\
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F" \
\
``` this is to throttle events from being fired again  ```\
| search NOT [search index=syd_smart_alert sourcetype = smartAlert \
                 "Scenario Type" = "CustomerAndEmployeeCardSwipe" earliest="-20m"\
                | eval indextime = _indextime\
                | addinfo \
                | where indextime >= relative_time(info_min_time,"+9m") AND \
                        indextime <= info_max_time\
                | rename "Scenario Type" as ScenarioTypeCode,\
                         "Customer ID"   as CustomerID,  \
                         "Employee ID"   as EmployeeID,\
                          Location       as LocationCode    \
        | stats count by ScenarioTypeCode CustomerID EmployeeID LocationCode                \
                | fields - count] \
\
| addinfo\
| eval latestSwipeTime  = if((CustomerTimestamp > EmployeeTimestamp),\
                              CustomerTimestamp, EmployeeTimestamp),\
       latestSwipeTimeP = strptime(latestSwipeTime,"%Y-%m-%dT%H:%M:%S"),\
       swipeInLast5mins = if((latestSwipeTimeP > (info_max_time - (5 * 60)))  ,"T","F")\
| where swipeInLast5mins = "T"\
\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0)\
    \
| where pitMatch = 1 AND gameMatch = 1 \
\
``` Custom lookup fields ```\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron \
     OUTPUT FirstName as custFirstName LastName as custLastName\
| fillnull value="" custFirstName custLastName\
\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`    \
| eval emplFirstName = FirstName,\
       emplLastName  = LastName\
| fillnull value="" emplFirstName emplLastName\
\
| eval Description = custFirstName + " " + upper(custLastName) + " #" + CustomerID + ", " +\
                     emplFirstName + " " + upper(emplLastName) + " #" + EmployeeID,\
       Status      = "New",\
       postTries   = 0,\
       EventTime   = replace(latestSwipeTime,"T"," "),\
       ```Active      = CustomerID, \
       ExpiryDate  = EmployeeID, ```\
       AlertKey    = SavedKey\
`SMART-CreateIGTAlertLookups(PropertyName="$PropertyName$")`
iseval = 0

[SMART-CustomerSwipe-Alert(2)]
args = PropertyName,PropertyID
definition = inputlookup SMART-$PropertyName$-ScenarioInstances \
  where (ScenarioTypeCode = "CustomerCardSwipe" AND PropertyID = "$PropertyID$") \
\
| eval expiry = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > now()\
\
| join type=left max=0 CustomerID\
   [ | tstats \
    latest(Customer_Swipes.PropertyID)        as PropertyID,\
    latest(Customer_Swipes.SignInCustomerID)  as CustomerID,\
    latest(Customer_Swipes.SwipeAction)       as SwipeAction,\
    latest(Customer_Swipes.EmployeeID)        as EmployeeID,\
    latest(Customer_Swipes.GameCode)          as GameCode,\
    latest(Customer_Swipes.GameLocationCode)  as LocationCode,\
    latest(Customer_Swipes.PitNo)             as PitNo,\
\
      from datamodel="Customer_Swipes"\
      where nodename="Customer_Swipes" AND\
            Customer_Swipes.PropertyID = $PropertyID$\
      by Customer_Swipes.PropertyID,\
         Customer_Swipes.SignInCustomerID, \
         _time\
\
     | where CustomerID != "" AND SwipeAction = "In"\
     | dedup CustomerID LocationCode\
     \
     | rename _time as EventTime\
     | fields PropertyID CustomerID EmployeeID PitNo GameCode LocationCode EventTime]\
\
| where isnotnull(EventTime)\
\
| eval _key = md5(\
    strftime(EventTime, "%d/%m/%Y %I:%M:%S %p") +\
    PropertyID + CustomerID + ScenarioTypeCode + PitNo + PitListCode + \
    GameCode + GameTypeList + Reason + AreaAuditedCode + Comments + \
    MonitoringType)\
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F"\
\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0)\
    \
| where pitMatch = 1 AND gameMatch = 1 \
\
| eval EventTime = strftime(EventTime,"%Y-%m-%d %H:%M:%S")\
\
``` Custom lookup fields ```\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron \
     OUTPUT FirstName as custFirstName LastName as custLastName\
| fillnull value="" custFirstName custLastName  \
       \
| eval Description =  custFirstName + " " + upper(custLastName) + " #" + CustomerID,\
       Status      = "New",\
       postTries   = 0\
\
`SMART-CreateAlertLookups(PropertyName="$PropertyName$")`
iseval = 0

[SMART-CustomerSwipe-Alert-IGTTM(2)]
args = PropertyName,PropertyID
definition = inputlookup SMART-$PropertyName$-ScenarioInstances \
  where (ScenarioTypeCode = "CustomerCardSwipe" AND PropertyID = "$PropertyID$") \
\
| addinfo    \
| eval expiry = if(ExpiryDate="",info_max_time+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > info_max_time\
\
| join type=left max=0 CustomerID\
   [ | tstats \
    latest(_time)                             as _time,\
    latest(Customer_Swipes.PropertyID)        as PropertyID,\
    latest(Customer_Swipes.SignInCustomerID)  as CustomerID,\
    latest(Customer_Swipes.SwipeAction)       as SwipeAction,\
    latest(Customer_Swipes.EmployeeID)        as EmployeeID,\
    latest(Customer_Swipes.GameCode)          as GameCode,\
    latest(Customer_Swipes.GameLocationCode)  as LocationCode,\
    latest(Customer_Swipes.PitNo)             as PitNo,\
\
      from datamodel="Customer_Swipes"\
      where nodename="Customer_Swipes" AND\
            Customer_Swipes.PropertyID = $PropertyID$ AND\
				      `offset_search_period("-20m", "N/A")`\
      by Customer_Swipes.PropertyID,\
         Customer_Swipes.SignInCustomerID\
\
     | where CustomerID != "" AND SwipeAction = "In"\
     | dedup CustomerID LocationCode\
     \
     | rename _time as EventTime\
     | fields PropertyID CustomerID EmployeeID PitNo GameCode LocationCode EventTime]\
\
| where isnotnull(EventTime)\
\
| eval _key = md5(\
    strftime(EventTime, "%d/%m/%Y %I:%M:%S %p") +\
    PropertyID + CustomerID + ScenarioTypeCode + PitNo + PitListCode + \
    GameCode + LocationCode + GameTypeList + Reason + AreaAuditedCode + Comments + \
    MonitoringType)\
| eval SavedKey = _key\
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F"\
\
``` this is to throttle events from being fired again  ```\
| search NOT [search index=syd_smart_alert sourcetype = smartAlert \
                 "Scenario Type" = "CustomerCardSwipe" earliest="-20m"\
                | eval indextime = _indextime\
                | addinfo \
                | where indextime >= relative_time(info_min_time,"+9m") AND \
                        indextime <= info_max_time\
                | rename "Scenario Type" as ScenarioTypeCode,\
                         "Customer ID"   as CustomerID,\
                          Location       as LocationCode    \
        | stats count by ScenarioTypeCode CustomerID LocationCode                \
                | fields - count] \
\
| addinfo\
| eval swipeInLast3mins = if((EventTime > (info_max_time - (3 * 60))),"T","F") \
| where swipeInLast3mins = "T"\
			\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0)\
    \
| where pitMatch = 1 AND gameMatch = 1 \
\
| eval EventTime = strftime(EventTime,"%Y-%m-%d %H:%M:%S")\
\
``` Custom lookup fields ```\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron \
     OUTPUT FirstName as custFirstName LastName as custLastName\
| fillnull value="" custFirstName custLastName  \
       \
| eval Description =  custFirstName + " " + upper(custLastName) + " #" + CustomerID,\
       Status      = "New",\
       postTries   = 0\
\
`SMART-CreateIGTAlertLookups(PropertyName="$PropertyName$")`
iseval = 0

[SMART-CustomerSwipes]
definition = tstats latest(_time) as _time,\
       latest(Customer_Swipes.SignInCustomerID)  as SignInCustomerID,\
       latest(Customer_Swipes.SignOutCustomerID) as SignOutCustomerID,       \
       latest(Customer_Swipes.EmployeeID)        as EmployeeID,\
       latest(Customer_Swipes.GameCode)          as GameCode,\
       latest(Customer_Swipes.LocationCode)      as LocationCode,       \
       latest(Customer_Swipes.GameLocationCode)  as GameLocationCode,\
       latest(Customer_Swipes.PitNo)             as PitNo,\
       latest(Customer_Swipes.PropertyID)        as PropertyID,\
       latest(Customer_Swipes.SubGameCode)       as SubGameCode,\
       latest(Customer_Swipes.SupervisorID)      as SupervisorID,\
       latest(Customer_Swipes.MinimumBet)        as MinimumBet,\
       latest(Customer_Swipes.MaximumBet)        as MaximumBet,\
       latest(Customer_Swipes.SwipeAction)       as SwipeAction,\
       latest(Customer_Swipes.SwipeType)         as SwipeType,\
       latest(Customer_Swipes.Timestamp)         as Timestamp,\
       latest(Customer_Swipes.VendorProduct)     as VendorProduct\
\
        count\
        from datamodel="Customer_Swipes" where nodename="Customer_Swipes"\
           by Customer_Swipes.PropertyID, Customer_Swipes.Timestamp, Customer_Swipes.SignInCustomerID, Customer_Swipes.SignOutCustomerID\
\
| rename Customer_Swipes.* as *

[SMART-CustomerWinLoss-Alert(3)]
args = PropertyName,PropertyID,Mode
definition = tstats \
    latest(_time) as _time,\
    latest(Ratings.CustomerID) as CustomerID,\
    latest(Ratings.EmployeeID) as EmployeeID,\
    latest(Ratings.GameCode) as GameCode,\
    latest(Ratings.LocationCode) as LocationCode,\
    latest(Ratings.PropertyID) as PropertyID,\
    latest(Ratings.ActualWin) as ActualWin,\
    latest(Ratings.AverageBet) as AverageBet,\
    latest(Ratings.Timestamp) as Timestamp,\
    latest(Ratings.VendorProduct) as VendorProduct\
    count\
  from datamodel="Ratings"\
  where Ratings.PropertyID = $PropertyID$ AND\
        nodename="Ratings.Gaming_Ratings" \
  by Ratings.PropertyID, Ratings.Timestamp, Ratings.CustomerID\
| rename Ratings.* as *\
\
``` filter so tmp variable below does not get too big ```\
| where len(LocationCode) = 4 AND ActualWin < 0\
\
`SMART-JoinTableMinimumBet`\
\
`comment("We may have multiple events within the alert Time Range.")`\
| dedup CustomerID LocationCode sortby - Timestamp\
\
| eval PropertyID       = $PropertyID$,\
       PitNo            = substr(LocationCode,1,2),\
       ScenarioTypeCode = "CustomerWinLoss"\
\
| lookup SMART-$PropertyName$-ScenarioInstances\
    PropertyID\
    ScenarioTypeCode\
  OUTPUT\
    ScenarioTypeCode as ScenarioCode\
    CustomerID as ScenarioCustomerID\
    Active\
    AreaAuditedCode\
    Comments\
    ExpiryDate\
    GameTypeList\
    MonitoringType\
    PitListCode\
    Priority\
    Reason\
    MinBetMin\
    MinBetMax\
    AvgBetMin\
    AvgBetMax\
    WinLossAmtMin\
    WinLossAmtMax\
\
| rex mode=sed field=GameTypeList "s/,/ /g" \
\
| eval tmp = mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(ScenarioCustomerID,ScenarioCode),Reason),AreaAuditedCode),Comments),GameTypeList),PitListCode),Priority),Active),ExpiryDate),MonitoringType),MinBetMin),MinBetMax),AvgBetMin),AvgBetMax),WinLossAmtMin),WinLossAmtMax)\
    \
| mvexpand tmp\
| eval tmp                = split(tmp,","),\
       ScenarioCustomerID = mvindex(tmp,0), \
       ScenarioCode       = mvindex(tmp,1), \
       Reason             = mvindex(tmp,2), \
       AreaAuditedCode    = mvindex(tmp,3), \
       Comments           = mvindex(tmp,4), \
       GameTypeList       = replace(mvindex(tmp,5)," ",","),        \
       PitListCode        = mvindex(tmp,6),       \
       Priority           = mvindex(tmp,7), \
       Active             = mvindex(tmp,8), \
       ExpiryDate         = mvindex(tmp,9), \
       MonitoringType     = mvindex(tmp,10), \
       MinBetMin          = mvindex(tmp,11), \
       MinBetMax          = mvindex(tmp,12),\
       AvgBetMin          = mvindex(tmp,13), \
       AvgBetMax          = mvindex(tmp,14),\
       WinLossAmtMin      = mvindex(tmp,15), \
       WinLossAmtMax      = mvindex(tmp,16)\
 \
| eval _key = md5(\
    strftime(_time, "%d/%m/%Y %I:%M:%S %p")\
    + ScenarioCustomerID\
    + ScenarioCode\
    + PitNo\
    + PitListCode\
    + GameCode\
    + GameTypeList\
    + Reason\
    + AreaAuditedCode\
    + Comments\
    + MonitoringType\
    + MinBetMin + MinBetMax\
    + AvgBetMin + AvgBetMax\
    + WinLossAmtMin + WinLossAmtMax    \
  )\
``` If called with mode = "Auto" then only process Priority = 3 ```\
| where ("$Mode$" = "Auto" AND Priority = 3) OR ("$Mode$" = "Manual" AND Priority < 3)\
\
``` Check if an alert has already been created ```\
\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F"),\
       PitListCode = upper(PitListCode)\
\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch     = if(match(PitListValue,PitNo),1,0),\
       gameMatch    = if(match(GameTypeList,GameCode),1,0),\
       minBetMatch  = if(MinimumBet >= MinBetMin AND MinimumBet <= MinBetMax,1,0), \
       avgBetMatch  = if(AverageBet >= AvgBetMin AND AverageBet <= AvgBetMax,1,0), \
       WinLossAmtMin = WinLossAmtMin * -1,\
       WinLossAmtMax = WinLossAmtMax * -1,\
       winLossMatch = if(ActualWin >= WinLossAmtMax AND ActualWin <= WinLossAmtMin,1,0), \
       expiry       = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
    \
| where (ScenarioCustomerID = "ALL" OR CustomerID = ScenarioCustomerID)\
    AND pitMatch = 1\
    AND gameMatch = 1\
    AND minBetMatch = 1\
    AND avgBetMatch = 1\
    AND winLossMatch = 1\
    AND Active = "True"\
    AND expiry > _time\
    AND exists = "F"\
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(_time,"%Y-%m-%d %H:%M:%S")\
\
``` Create event in Alert & Audit logs ```\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron OUTPUT FirstName LastName\
\
`SMART-GetItrakUser()`\
\
| fillnull value="" FirstName LastName                                                      \
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       Status         = if("$Mode$" = "Manual","New","Posting"),\
       postTries      = if("$Mode$" = "Manual",0,0),\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       LocationCode   = GameCode + LocationCode,\
       iTrakReference = "",\
       ActualWin      = round((ActualWin),2),       \
       Description = "Table: " + LocationCode + " Win = $" + tostring(ActualWin,"commas"),\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd") \
| eval custFirstName = FirstName    \
| eval custLastName = LastName\
                                                                                                    \
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
| eval LookupKey = _key,\
       ActualWin = ActualWin * -1\
\
`SMART-CreateITRAKPayload(ScenarioTypeCode,Reason)`\
\
| table expiry LookupKey PropertyID Timestamp ScenarioTypeCode CustomerID EmployeeID LocationCode PitNo Active \
        AreaAuditedCode Comments ExpiryDate GameCode GameTypeList MonitoringType \
        PitListCode Priority Reason Description Status LastUpdated LastUpdatedBy iTrakReference _indexPrefix payload ActualWin IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-DACOMJackpot-Alert(2)]
args = PropertyName,PropertyID
definition = index=dacom_prod 314 \
| table Location Jackpot_Name _time JackpotValue\
\
| eval PropertyID       = $PropertyID$,\
       ScenarioTypeCode = "DACOMJackpot",\
       LocationCode     = Location,\
       Section          = substr(Location,1,1),\
       Bank             = substr(Location,2,2),\
       Machine          = substr(Location,4,2)\
\
| lookup SMART-$PropertyName$-ScenarioInstances\
    PropertyID\
    ScenarioTypeCode\
  OUTPUT\
    ScenarioTypeCode as ScenarioCode\
    Active\
    AreaAuditedCode\
    Reason\
    Comments\
    ExpiryDate\
    MonitoringType\
    Priority\
    AmountMin AmountMax\
    Section as ScenarioSection\
    BankMin BankMax\
    MachineMin MachineMax\
\
| where ScenarioCode = ScenarioTypeCode\
\
| eval tmp = mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(ScenarioCode,Reason),AreaAuditedCode),Comments),Priority),Active),ExpiryDate),MonitoringType),AmountMin),AmountMax),ScenarioSection),BankMin),BankMax),MachineMin),MachineMax)\
\
| mvexpand tmp\
| eval tmp                = split(tmp,","),\
       ScenarioCode       = mvindex(tmp,0), \
       Reason             = mvindex(tmp,1), \
       AreaAuditedCode    = mvindex(tmp,2), \
       Comments           = mvindex(tmp,3), \
       Priority           = mvindex(tmp,4), \
       Active             = mvindex(tmp,5), \
       ExpiryDate         = mvindex(tmp,6), \
       MonitoringType     = mvindex(tmp,7), \
       AmountMin          = mvindex(tmp,8),\
       AmountMax          = mvindex(tmp,9),\
       ScenarioSection    = mvindex(tmp,10),\
       BankMin            = mvindex(tmp,11),\
       BankMax            = mvindex(tmp,12),\
       MachineMin         = mvindex(tmp,13),\
       MachineMax         = mvindex(tmp,14)\
\
| eval _key = md5(\
    strftime(_time, "%d/%m/%Y %I:%M:%S %p")\
    + PropertyID + ScenarioCode + Reason + AreaAuditedCode + Comments + MonitoringType\
    + LocationCode + JackpotValue\
    + AmountMin + AmountMax  \
    + ScenarioSection + BankMin + BankMax + MachineMin + MachineMax)\
\
``` Check if an alert has already been created ```\
\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")\
\
| eval amtMatch     = if((JackpotValue >= AmountMin AND JackpotValue <= AmountMax),1,0),\
       bankMatch    = if((Bank >= BankMin AND Bank <= BankMax),1,0),\
       machineMatch = if((Machine >= MachineMin AND Machine <= MachineMax),1,0),\
       expiry       = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
\
| where Section = ScenarioSection\
    AND amtMatch = 1 \
    AND bankMatch = 1\
    AND machineMatch = 1\
\
    AND Active = "True"\
    AND expiry > _time\
    AND exists = "F"\
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(_time,"%Y-%m-%d %H:%M:%S")\
\
``` Create event in Alert & Audit logs ```\
\
`SMART-GetItrakUser()`\
\
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       Status         = "New",\
       postTries      = 0,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       Description    = "Location: " + LocationCode + " (" + Jackpot_Name + "), Amount=" + JackpotValue,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd")    \
\
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
| eval LookupKey = _key\
\
| table expiry LookupKey PropertyID Timestamp ScenarioTypeCode Active AreaAuditedCode Comments ExpiryDate MonitoringType Priority Reason Description Status JackpotValue LastUpdated LastUpdatedBy iTrakReference _indexPrefix IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-EmployeeSwipe-Alert(2)]
args = PropertyName,PropertyID
definition = `SMART-EmployeeSwipes(PropertyID="$PropertyID$")`\
| where SignInEmployeeID != ""\
\
``` split DEALER_CHANGE, SUPERVISOR_CHANGE and DEALER_CREW_CHANGE events into separate \
    Sign Out and Sign In events. Split "Open Table" and "Close Table" events into \
    2 separate Sign In or 2 separate Sign Out events ```\
\
| eval openSwipe  = if(SignInSuperID  != "",1,0),\
       closeSwipe = if(SignOutSuperID != "",1,0)\
\
| eval splitField = split("split1,split2",",")\
| mvexpand splitField\
\
| eval emp1      = if(splitField="split1",case(openSwipe==1,SignInSuperID,closeSwipe==1,SignOutSuperID,1==1,SignInEmployeeID),""),\
       emp2      = if(splitField="split2",case(openSwipe==1,SignInEmployeeID,closeSwipe==1,SignOutEmployeeID,1==1,SignOutEmployeeID),""),\
       dir1      = if(splitField="split1",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"In"),""),\
       dir2      = if(splitField="split2",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"Out"),""),\
       \
       EmployeeID = if(splitField="split1",emp1,emp2),\
       swipeType  = if(splitField="split1",dir1,dir2)\
\
``` commented out dedup as part of fix for CP-5252, can be reinstated if edge case found that requires this ```\
``` | dedup EmployeeID sortby - _time ```\
\
``` check if the latest swipe was a swipe In event ```\
| search EmployeeID != "" AND swipeType  = "In"\
\
| eval PropertyId       = $PropertyID$,\
       ScenarioTypeCode = "EmployeeCardSwipe",\
       LocationCode     = GameLocationCode\
       \
| lookup SMART-$PropertyName$-ScenarioInstances PropertyID EmployeeID ScenarioTypeCode OUTPUT EmployeeID as ScenarioEmployeeID ScenarioTypeCode as ScenarioCode\
         Active AreaAuditedCode Comments ExpiryDate GameTypeList MonitoringType PitListCode Priority Reason\
         \
| where ScenarioCode = ScenarioTypeCode\
\
| rex mode=sed field=GameTypeList "s/,/ /g" \
\
| eval tmp = mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(ScenarioEmployeeID,ScenarioCode),Reason),AreaAuditedCode),Comments),GameTypeList),PitListCode),Priority),Active),ExpiryDate),MonitoringType)\
| mvexpand tmp \
| eval tmp                = split(tmp,","),\
       ScenarioEmployeeID = mvindex(tmp,0), \
       ScenarioCode       = mvindex(tmp,1), \
       Reason             = mvindex(tmp,2), \
       AreaAuditedCode    = mvindex(tmp,3), \
       Comments           = mvindex(tmp,4), \
       GameTypeList       = replace(mvindex(tmp,5)," ",","),        \
       PitListCode        = mvindex(tmp,6),       \
       Priority           = mvindex(tmp,7), \
       Active             = mvindex(tmp,8), \
       ExpiryDate         = mvindex(tmp,9),\
       MonitoringType     = mvindex(tmp,10) \
       \
| eval _key = md5(strftime(_time, "%d/%m/%Y %I:%M:%S %p") + PropertyID + SignInEmployeeID + ScenarioCode + PitNo + PitListCode + GameCode + GameTypeList + \
                                                            Reason + AreaAuditedCode + Comments + MonitoringType)\
\
``` Check if an alert has already been created ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode       \
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")\
\
``` Check if the Employee Swipe Alert has occured in the last \
    4 mins and has not already been alerted in the last 10 mins ```        \
| lookup SMART-$PropertyName$-Alerts ScenarioTypeCode EmployeeID OUTPUT AlertTime as AlertTimes\
\
| eventstats max(AlertTimes) as latestAlertTime by EmployeeID\
| eval latestSwipeTime = _time,\
       latestAlertTime = strptime(latestAlertTime,"%Y-%m-%d %H:%M:%S")\
\
| eval nonfor10min      = if(isnull(latestAlertTime) OR ((latestAlertTime + (10 * 60)) <= now()),"T","F")\
| eval swipeInLast4mins = if((latestSwipeTime > (now() - (4 * 60)))  ,"T","F")\
\
| where nonfor10min = "T" AND swipeInLast4mins = "T"\
\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0),       \
       expiry    = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
\
| where EmployeeID = ScenarioEmployeeID AND\
        pitMatch = 1 AND gameMatch = 1 AND\
        Active = "True" AND\
        expiry > _time AND\
        exists = "F"\
                  \
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`                          \
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(_time,"%Y-%m-%d %H:%M:%S")\
\
`SMART-GetItrakUser()`\
\
| fillnull value="" FirstName LastName              \
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       Status         = "New",\
       postTries      = 0,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       Description    =  FirstName + " " + upper(LastName) + " #" + EmployeeID,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd")    \
\
| outputlookup SMART-$PropertyName$-Alerts append=true      \
\
| eval LookupKey = _key\
| table expiry LookupKey PropertyID Timestamp ScenarioTypeCode EmployeeID LocationCode PitNo Active \
        AreaAuditedCode Comments ExpiryDate GameCode GameTypeList MonitoringType \
        PitListCode Priority Reason Description Status LastUpdated LastUpdatedBy iTrakReference _indexPrefix IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-EmployeeSwipe-Alert-IGTTM(2)]
args = PropertyName,PropertyID
definition = `SMART-EmployeeSwipes(PropertyID="$PropertyID$")`\
| where SignInEmployeeID != "" AND SignInEmployeeID != "null"\
\
``` split DEALER_CHANGE, SUPERVISOR_CHANGE and DEALER_CREW_CHANGE events into separate \
    Sign Out and Sign In events. Split "Open Table" and "Close Table" events into \
    2 separate Sign In or 2 separate Sign Out events ```\
\
| eval openSwipe  = if(SignInSuperID  != "",1,0),\
       closeSwipe = if(SignOutSuperID != "",1,0)\
\
| eval splitField = split("split1,split2",",")\
| mvexpand splitField\
\
| eval emp1      = if(splitField="split1",case(openSwipe==1,SignInSuperID,closeSwipe==1,SignOutSuperID,1==1,SignInEmployeeID),""),\
       emp2      = if(splitField="split2",case(openSwipe==1,SignInEmployeeID,closeSwipe==1,SignOutEmployeeID,1==1,SignOutEmployeeID),""),\
       dir1      = if(splitField="split1",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"In"),""),\
       dir2      = if(splitField="split2",case(openSwipe==1,"In",closeSwipe==1,"Out",1==1,"Out"),""),\
       \
       EmployeeID = if(splitField="split1",emp1,emp2),\
       swipeType  = if(splitField="split1",dir1,dir2)\
\
| dedup EmployeeID, GameLocationCode sortby - _time \
\
``` check if the latest swipe was a swipe In event ```\
| search EmployeeID != "" AND EmployeeID != "null" AND swipeType  = "In"\
\
| eval PropertyId       = $PropertyID$,\
       ScenarioTypeCode = "EmployeeCardSwipe",\
       LocationCode     = GameLocationCode\
       \
| lookup SMART-$PropertyName$-ScenarioInstances PropertyID EmployeeID ScenarioTypeCode OUTPUT EmployeeID as ScenarioEmployeeID ScenarioTypeCode as ScenarioCode\
         Active AreaAuditedCode Comments ExpiryDate GameTypeList MonitoringType PitListCode Priority Reason\
         \
| where ScenarioCode = ScenarioTypeCode\
\
| rex mode=sed field=GameTypeList "s/,/ /g" \
\
| eval tmp = mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(ScenarioEmployeeID,ScenarioCode),Reason),AreaAuditedCode),Comments),GameTypeList),PitListCode),Priority),Active),ExpiryDate),MonitoringType)\
| mvexpand tmp \
| eval tmp                = split(tmp,","),\
       ScenarioEmployeeID = mvindex(tmp,0), \
       ScenarioCode       = mvindex(tmp,1), \
       Reason             = mvindex(tmp,2), \
       AreaAuditedCode    = mvindex(tmp,3), \
       Comments           = mvindex(tmp,4), \
       GameTypeList       = replace(mvindex(tmp,5)," ",","),        \
       PitListCode        = mvindex(tmp,6),       \
       Priority           = mvindex(tmp,7), \
       Active             = mvindex(tmp,8), \
       ExpiryDate         = mvindex(tmp,9),\
       MonitoringType     = mvindex(tmp,10) \
       \
| eval _key = md5(strftime(_time, "%d/%m/%Y %I:%M:%S %p") + PropertyID + EmployeeID + ScenarioCode + PitNo + PitListCode + GameCode + GameTypeList + \
                                                            Reason + AreaAuditedCode + Comments + MonitoringType)\
\
``` Check if an alert has already been created ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode       \
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")\
\
``` this is to throttle alerts from being fired again  ```\
| search NOT [search index=syd_smart_alert sourcetype = smartAlert \
                     "Scenario Type" = "EmployeeCardSwipe" earliest="-20m"\
                | eval indextime = _indextime\
                | addinfo \
                | where indextime >= relative_time(info_min_time,"+9m") AND \
                        indextime <= info_max_time\
                | rename "Scenario Type" as ScenarioTypeCode,\
                         "Employee ID"   as EmployeeID,\
                         Location        as LocationCode    \
		| stats count by ScenarioTypeCode EmployeeID LocationCode				\
                | fields - count] \
\
| addinfo\
| eval swipeInLast3mins = if((_time > (info_max_time - (3 * 60))),"T","F") \
| where swipeInLast3mins = "T"\
\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0),\
       gameMatch = if(match(GameTypeList,GameCode),1,0),       \
       expiry    = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
\
| where EmployeeID = ScenarioEmployeeID AND\
        pitMatch = 1 AND gameMatch = 1 AND\
        Active = "True" AND\
        expiry > _time AND\
        exists = "F"\
                  \
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`                          \
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(_time,"%Y-%m-%d %H:%M:%S")\
\
`SMART-GetItrakUser()`\
\
| fillnull value="" FirstName LastName              \
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       Status         = "New",\
       postTries      = 0,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       Description    =  FirstName + " " + upper(LastName) + " #" + EmployeeID,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd")    \
\
| outputlookup SMART-$PropertyName$-Alerts append=true      \
\
| eval LookupKey = _key\
| table expiry LookupKey PropertyID Timestamp AlertTime ScenarioTypeCode EmployeeID LocationCode PitNo Active \
        AreaAuditedCode Comments ExpiryDate GameCode GameTypeList MonitoringType \
        PitListCode Priority Reason Description Status LastUpdated LastUpdatedBy iTrakReference _indexPrefix IndexTimestamp\
        \
| eval AlertKey = LookupKey\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-EmployeeSwipes(1)]
args = PropertyID
definition = tstats \
    latest(_time) as _time,\
    latest(Employee_Swipes.SignInEmployeeID)    as SignInEmployeeID,\
    latest(Employee_Swipes.SignInEmployeeRole)  as SignInEmployeeRole,\
    latest(Employee_Swipes.SignInSuperID)       as SignInSuperID,\
    latest(Employee_Swipes.SignOutEmployeeID)   as SignOutEmployeeID,\
    latest(Employee_Swipes.SignOutEmployeeRole) as SignOutEmployeeRole,\
    latest(Employee_Swipes.SignOutSuperID)      as SignOutSuperID,\
    latest(Employee_Swipes.GameCode)            as GameCode,\
    latest(Employee_Swipes.PitNo)               as PitNo,\
    latest(Employee_Swipes.LocationCode)        as LocationCode,    \
    latest(Employee_Swipes.GameLocationCode)    as GameLocationCode,\
    latest(Employee_Swipes.PropertyID)          as PropertyID,\
    latest(Employee_Swipes.SubGameCode)         as SubGameCode,\
    latest(Employee_Swipes.SwipeAction)         as SwipeAction,\
    latest(Employee_Swipes.SwipeType)           as SwipeType,\
    latest(Employee_Swipes.Timestamp)           as Timestamp,\
    latest(Employee_Swipes.VendorProduct)       as VendorProduct\
    count\
  from datamodel="Employee_Swipes"\
  where nodename="Employee_Swipes" AND \
  Employee_Swipes.PropertyID = "$PropertyID$"\
  by \
    Employee_Swipes.PropertyID,\
    Employee_Swipes.Timestamp,\
    Employee_Swipes.SignInEmployeeRole,\
    Employee_Swipes.SignOutEmployeeRole,\
    Employee_Swipes.SignInEmployeeID,\
    Employee_Swipes.SignOutEmployeeID,\
    Employee_Swipes.GameLocationCode\
\
| rename Employee_Swipes.* as *
iseval = 0

[SMART-GetEmployeeName(2)]
args = PropertyName,EmployeeID
definition = | eval alertKey = _key\
| lookup SEARCH-LOOKUP-MEL-EmployeeDetails $EmployeeID$ OUTPUT PreferredName as melPreferredName\
| lookup CROWN-LOOKUP-PER-EmployeeDetails $EmployeeID$ OUTPUT PreferredName as perPreferredName\
| lookup CROWN-LOOKUP-SYD-Workday-Employees $EmployeeID$ OUTPUT PreferredName as sydPreferredName\
\
| eval PreferredName = \
   case("$PropertyName$"=="MEL",melPreferredName,\
        "$PropertyName$"=="PER",perPreferredName,\
        "$PropertyName$"=="SYD",sydPreferredName,\
        1==1,"")\
\
| eval name       = split(PreferredName," "), \
       LastName   = mvindex(name,0),\
       FirstName  = mvindex(name,1),\
       MiddleName = mvindex(name,2)\
\
``` Restore Alert Key ```\
| eval _key = alertKey
iseval = 0

[SMART-GetItrakStatus(2)]
args = ScenarioType,Priority
definition = | eval iTrakStatus = case(\
   $ScenarioType$="NewCard", "Closed",\
   $ScenarioType$="NewEquipment", "Closed",\
   $ScenarioType$="TableWinLoss" AND $Priority$=3, "Closed",\
   $ScenarioType$="CustomerWinLoss" AND $Priority$=3, "Closed",\
   1=1,"Open")
iseval = 0

[SMART-GetItrakUser]
definition = | eval iTrakPersonnelID = case( \
   PropertyID=1, "ns381561", \
   PropertyID=2, "ns381561", \
   PropertyID=3, "500401", \
   1=1,"")
iseval = 0

[SMART-JoinTableMinimumBet]
definition = | join max=0 type=outer LocationCode\
   [ | tstats\
    latest(Table_Events.LocationCode) as LocationCode,\
    latest("Table_Events.GameCode")   as GameCode,\
    latest(Table_Events.MinimumBet)   as MinimumBet,\
    \
  from datamodel="Gaming_Table"\
  where nodename="Table_Events.Config" AND \
        Table_Events.PropertyID = 1 AND \
        Table_Events.MinimumBet = * AND \
        earliest=-12h\
     by Table_Events.LocationCode \
                   \
| fields LocationCode, MinimumBet, GameCode]
iseval = 0

[SMART-REPORT-ITRAK-POST(1)]
args = PropertyName
definition = inputlookup SMART-$PropertyName$-Alerts\
\
| where postTries < 3 AND Status = "Posting"\
\
| eval LastUpdated_epoch = strptime(LastUpdated,"%d/%m/%Y %H:%M:%S")\
       \
| where\
    LastUpdated_epoch >= relative_time(now(),"-2d") \
\
| eval AlertID = _key\
| join max=0 type=outer AlertID\
   [ search index=*_smart_alert sourcetype=post_to_crown_gateway TriggeredBy=SMART  earliest=-2d\
     | eval AlertID  = UniqueID\
     | eval PostResult = ret_code\
     | fields AlertID PostResult]\
\
```| stats latest(PostResult) as PostResult```\
\
| where isnull(PostResult) OR PostResult !=200\
\
| eval LookupKey = _key\
\
``` if these values are null then the lookup will cause performance issues ```\
| fillnull value="999999"   EmployeeID\
| fillnull value="99999999" CustomerID\
\
| eval PropertyName = case(PropertyID=1,"MEL",PropertyID=2,"PER",PropertyID=3,"SYD") \
\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`\
| eval emplFirstName = FirstName, emplLastName  = LastName\
\
| eval patron = CustomerID\
| lookup $PropertyName$-patronLookup patron OUTPUT FirstName AS custFirstName LastName AS custLastName\
\
| eval FirstName = if(ScenarioTypeCode="CustomerCardSwipe",custFirstName,emplFirstName),\
       LastName  = if(ScenarioTypeCode="CustomerCardSwipe",custLastName,emplLastName)\
\
`SMART-CreateITRAKPayload(ScenarioTypeCode,Reason)`\
 \
| lookup SMART-$PropertyName$-Alerts _key AS LookupKey\
 \
| eval _key           = LookupKey,\
       postTries      = postTries + 1,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S")\
\
``` remove fields created by payload macro so these are not added to the lookup ```\
| fields - BaseFields, AddPatron, AddParticipant, AddPatronAndParticipant, AddCustomerWinLoss, AddTableWinLoss\
           Property, MessageType, CurrentTime, SavingsLossValue, Violation, SavingsLossType\
\
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
``` multiple payloads need to be formatted as an array \
    for the call to Crown Gateway Alert Action ```\
\
| stats values(payload) as payload\
| eval payload = mvjoin(payload,",")\
| eval payload = "[" + payload + "]"\
| table payload
iseval = 0

[SMART-REPORT-ITRAK-UPDATE(1)]
args = PropertyName
definition = inputlookup SMART-$PropertyName$-Alerts \
| where Status = "Posting"\
\
| eval LastUpdated_epoch = strptime(LastUpdated,"%d/%m/%Y %H:%M:%S"), ``` debug ```\
       LastUpdated_disp   = strftime(strptime(LastUpdated,"%d/%m/%Y %H:%M:%S"),\
                                     "%Y-%m-%d %H:%M:%S"),\
       correlationId     = _key\
\
``` Only look back 7 days ```\
| where LastUpdated_epoch > relative_time(now(),"-7d") \
\
| join max=0 type=outer correlationId\
   [ search index=*_smart_alert sourcetype=crown:iTrak:auditReference\
               earliest=-7d\
     | fields correlationId iTrakReference iTrakPostError errorDescription]\
 \
``` If we have not received a response from CGW for 1 hour then mark as failure ``` \
| where isnotnull(iTrakPostError) OR postTries >= 3 OR LastUpdated_epoch < relative_time(now(),"-1hr")\
 \
| eval Status         = "Posted",\
       iTrakReference = case(iTrakPostError = "false",iTrakReference,\
                             iTrakPostError = "true","API Error",\
                             postTries >= 3,"Post Failure",\
                             1==1,"No iTrak Reference Received"),\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S")\
\
| outputlookup SMART-$PropertyName$-Alerts append=true\
\
| eval AlertKey = correlationId\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-TableNewEquipment-Alert(2)]
args = PropertyName,PropertyID
definition = inputlookup SMART-$PropertyName$-ScenarioInstances \
  where (ScenarioTypeCode = "NewEquipment" AND PropertyID = "$PropertyID$") \
\
| eval expiry = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > now()\
\
| rename EmployeeID as null\
\
| join type=left max=0\
[ | tstats \
    latest(_time) as _time,\
    latest(Table_Events.EmployeeID)       as EmployeeID,\
    latest(Table_Events.GameCode)         as GameCode,\
    latest(Table_Events.PitNo)            as PitNo,    \
    latest(Table_Events.GameLocationCode) as LocationCode,\
    latest(Table_Events.PropertyID)       as PropertyID,\
    latest(Table_Events.Timestamp)        as EventTime\
    \
  from datamodel="Gaming_Table"\
  where Table_Events.PropertyID = $PropertyID$ AND\
        nodename="Table_Events.New_Equipment"\
  by Table_Events.PropertyID,\
     Table_Events.GameLocationCode,\
     Table_Events.Timestamp\
\
| fields PropertyID EmployeeID PitNo GameCode LocationCode EventTime] \
\
| where isnotnull(EventTime)\
\
| eval _key = md5(\
    EventTime +\
    PropertyID + EmployeeID + ScenarioTypeCode + PitNo + PitListCode + \
    GameCode + Reason + AreaAuditedCode + Comments + \
    MonitoringType)\
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F"\
\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch  = if(match(PitListValue,PitNo),1,0)\
| where pitMatch = 1\
\
``` Custom lookup fields ```\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)` | fillnull value="" FirstName LastName  \
| rename FirstName as emplFirstName LastName as emplLastName\
       \
| eval Description =  LocationCode + " " + emplFirstName + " " + upper(emplLastName) + " #" + EmployeeID,\
       Status      = "Posting",\
       postTries   = 0\
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime=strftime(strptime(EventTime, "%Y-%m-%dT%H:%M:%S"), "%Y-%m-%d %H:%M:%S")\
\
`SMART-CreateAlertLookups(PropertyName="$PropertyName$")`
iseval = 0

[SMART-TableSignificantAction-Alert(2)]
args = PropertyName,PropertyID
definition = tstats \
    latest(_time) as _time,\
    latest(Table_Events.EmployeeID)       as EmployeeID,\
    latest(Table_Events.GameCode)         as GameCode,\
    latest(Table_Events.PitNo)            as PitNo,       \
    latest(Table_Events.LocationCode)     as LocationCode,\
    latest(Table_Events.GameLocationCode) as GameLocationCode,\
    latest(Table_Events.PropertyID)       as PropertyID,\
    latest(Table_Events.Timestamp)        as Timestamp\
    \
  from datamodel="Gaming_Table"\
  where nodename="Table_Events.Significant_Actions" AND\
        Table_Events.PropertyID = $PropertyID$\
by Table_Events.PropertyID,\
     Table_Events.GameLocationCode,\
     Table_Events.Timestamp\
\
`SMART-JoinTableMinimumBet`\
\
`comment("We may have multiple events within the alert Time Range.")`\
| dedup LocationCode GameCode sortby - Timestamp\
\
| eval PropertyID       = $PropertyID$,\
       ScenarioTypeCode = "SignificantAction"\
\
| lookup SMART-$PropertyName$-ScenarioInstances\
    PropertyID\
    ScenarioTypeCode\
  OUTPUT\
    ScenarioTypeCode as ScenarioCode\
    EmployeeID as ScenarioEmployeeID                                    \
    Active\
    AreaAuditedCode\
    Comments\
    ExpiryDate\
    GameTypeList\
    MonitoringType\
    PitListCode\
    Priority\
    Reason\
    MinBetMin\
    MinBetMax\
\
| where ScenarioCode = ScenarioTypeCode\
\
| rex mode=sed field=GameTypeList "s/,/ /g" \
\
| eval tmp = mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(mvzip(ScenarioCode,Reason),AreaAuditedCode),Comments),GameTypeList),PitListCode),Priority),Active),ExpiryDate),MonitoringType),MinBetMin),MinBetMax)\
| mvexpand tmp\
\
| eval tmp                = split(tmp,","),\
       ScenarioCode       = mvindex(tmp,0), \
       Reason             = mvindex(tmp,1), \
       AreaAuditedCode    = mvindex(tmp,2), \
       Comments           = mvindex(tmp,3), \
       GameTypeList       = replace(mvindex(tmp,4)," ",","), \
       PitListCode        = mvindex(tmp,5),       \
       Priority           = mvindex(tmp,6), \
       Active             = mvindex(tmp,7), \
       ExpiryDate         = mvindex(tmp,8), \
       MonitoringType     = mvindex(tmp,9),\
       MinBetMin          = mvindex(tmp,10), \
       MinBetMax          = mvindex(tmp,11) \
\
| eval _key = md5(\
    strftime(_time, "%d/%m/%Y %I:%M:%S %p")\
    + PropertyID            \
    + ScenarioCode\
    + PitNo\
    + PitListCode\
    + GameCode\
    + GameTypeList\
    + Reason\
    + AreaAuditedCode\
    + Comments\
    + MonitoringType\
    + MinBetMin\
    + MinBetMax\
  )\
\
``` Check if an alert has already been created ```\
\
| lookup SMART-$PropertyName$-Alerts _key\
  OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F"),\
       PitListCode = upper(PitListCode)\
\
| lookup SMART-PitLists PropertyID PitListCode\
  OUTPUT PitListValue\
\
| eval pitMatch    = if(match(PitListValue,PitNo),1,0),\
       gameMatch   = if(match(GameTypeList,GameCode),1,0),\
       minBetMatch = if(MinimumBet >= MinBetMin AND MinimumBet <= MinBetMax,1,0), \
       expiry      = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
                                       \
| where pitMatch = 1\
    AND gameMatch = 1\
    AND minBetMatch = 1\
    AND Active = "True"\
    AND expiry > _time\
    AND exists = "F"\
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(_time,"%Y-%m-%d %H:%M:%S")\
\
``` Create event in Alert & Audit logs ```\
\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`                          \
| fillnull value="" FirstName LastName \
\
`SMART-GetItrakUser()`\
\
| eval Timestamp      = strftime(now(),"%Y-%m-%d %H:%M:%S"),\
       IndexTimestamp = strftime(now(),"%Y-%m-%d %H:%M:%S %z"),\
       AlertTime      = EventTime,\
       LookupKey      = _key, \
       AlertKey       = LookupKey,\
       Status         = "New",\
       postTries      = 0,\
       LastUpdated    = strftime(now(),"%d/%m/%Y %H:%M:%S"),\
       LastUpdatedBy  = iTrakPersonnelID,\
       LocationCode   = GameLocationCode,\
       Description    = GameLocationCode + ", " + FirstName + " " + upper(LastName) + " #" + EmployeeID,\
       iTrakReference = "",\
       _indexPrefix   = case(PropertyID=="1", "melb", PropertyID=="2", "perth", PropertyID=="3", "syd") \
\
| table \
   _key PropertyID AlertTime AlertKey Description ScenarioTypeCode EmployeeID \
   Reason AreaAuditedCode LocationCode GameCode PitListCode GameTypeList Comments \
   Priority ExpiryDate Active MonitoringType Status postTries iTrakReference \
   LastUpdated LastUpdatedBy _indexPrefix IndexTimestamp    \
\
| outputlookup SMART-$PropertyName$-Alerts append=true\
| outputlookup SMART-$PropertyName$-AlertAudits append=true
iseval = 0

[SMART-TableWinLoss-Alert(3)]
args = PropertyName,PropertyID,Mode
definition = inputlookup SMART-$PropertyName$-ScenarioInstances\
  where (ScenarioTypeCode = "TableWinLoss" AND PropertyID = "$PropertyID$") \
\
| eval expiry = if(ExpiryDate="",now()+1000,strptime(ExpiryDate + " 00:00:00","%d/%m/%Y %H:%M:%S"))\
| where Active = "True" AND expiry > now()\
\
``` If called with mode = "Auto" then only process Priority = 3 ```\
| where ("$Mode$" = "Auto" AND Priority = 3) OR ("$Mode$" = "Manual" AND Priority < 3)\
\
| join type=left max=0 \
   [ tstats\
    latest(_time) as _time,\
    latest(Table_Events.PropertyID)    as PropertyID\
    latest(Table_Events.Timestamp)     as Timestamp\
    latest(Table_Events.WinLoss)       as WinLoss\
    latest(Table_Events.GameCode)      as GameCode\
    latest(Table_Events.LocationCode)  as LocationCode\
    latest(Table_Events.MinimumBet)    as MinimumBet\
    latest(Table_Events.PitNo)         as PitNo\
    latest(Table_Events.EmployeeID)    as EmployeeID\
    latest(Table_Events.VendorProduct) as VendorProduct\
    count\
   from datamodel="Gaming_Table"\
   where nodename="Table_Events.Hourly" AND \
         Table_Events.PropertyID = $PropertyID$\
   by Table_Events.PropertyID, \
      Table_Events.Timestamp,\
      Table_Events.GameLocationCode\
     | rename _time as EventTime,\
              EmployeeID as Employee\
     | fields PropertyID LocationCode WinLoss PitNo GameCode GameLocationCode EventTime Employee ]\
\
| eval EmployeeID = Employee\
\
`SMART-JoinTableMinimumBet`\
\
| eval _key = md5(\
    strftime(EventTime, "%d/%m/%Y %I:%M:%S %p") + ScenarioTypeCode\
    + PitNo + PitListCode\
    + GameCode + GameTypeList\
    + Reason + AreaAuditedCode + Comments + MonitoringType\
    + MinBetMin + MinBetMax\
    + WinLossAmtMin + WinLossAmtMax)\
\
``` check if alert exists ```\
| lookup SMART-$PropertyName$-Alerts _key OUTPUT ScenarioTypeCode as existingScenarioTypeCode\
| eval exists = if(isnotnull(existingScenarioTypeCode),"T","F")  \
| where exists = "F"\
\
``` expand Pit List ```\
| eval PitListCode = upper(PitListCode)\
| lookup SMART-PitLists PropertyID PitListCode OUTPUT PitListValue\
\
| eval pitMatch     = if(match(PitListValue,PitNo),1,0),\
       gameMatch    = if(match(GameTypeList,GameCode),1,0),\
       minBetMatch  = if(MinimumBet >= MinBetMin AND MinimumBet <= MinBetMax,1,0),\
       winLossMatch = if(WinLoss >= (WinLossAmtMax * -1) AND WinLoss <= (WinLossAmtMin * -1),1,0)\
    \
| where pitMatch  = 1 AND gameMatch = 1 AND minBetMatch = 1    AND winLossMatch = 1\
\
``` Custom lookup fields ```\
`SMART-GetEmployeeName("$PropertyName$",EmployeeID)`                          \
| fillnull value="" FirstName LastName\
\
| eval WinLoss        = round((WinLoss),2),\
       Description    = "Table: " + LocationCode + " Loss = $" + tostring(WinLoss,"commas"),\
       LocationCode   = GameCode + LocationCode, \
       Status         = if("$Mode$" = "Manual","New","Posting"),\
       postTries      = if("$Mode$" = "Manual",0,0)\
\
``` Adding in logic for to ensure AlertTime is populated with true event time keeping it above the alert and audit generation code incase this is replaced by the common macro in the future ```\
| eval EventTime = strftime(EventTime,"%Y-%m-%d %H:%M:%S")\
\
`SMART-CreateAlertLookups(PropertyName="$PropertyName$")`
iseval = 0
